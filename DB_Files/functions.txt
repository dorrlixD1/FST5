/*********************************************************************
/**
/**Function: f_nextID_n
/** In: l_v_tablename_in–name der Tabelle in der die max(ID) gesucht wird
/** Returns: next ID
/**Developer: Bauer, Dorr
/**Description: Funktion um die nächtse ID zu bestimmen
/**
/**********************************************************************/
CREATE OR REPLACE
FUNCTION f_nextID_n (l_v_tablename_in IN varchar2)
RETURN number
AS
	l_n_nextID number := 0;
	l_n_maxID number := 0;
	l_n_helper number := 0;
	l_n_errlogid number := 0;
--x_idEmpty Exception;
BEGIN
	EXECUTE IMMEDIATE 'select max(id) from ' || l_v_tablename_in into l_n_maxID ;
	l_n_nextID := l_n_maxID +1;
	if l_n_maxID is NULL then
		l_n_nextID := 1;
		--RAISE x_idEmpty;
	end if;
	return l_n_nextID;

EXCEPTION

WHEN NO_DATA_FOUND THEN
	RAISE_APPLICATION_ERROR(-20050,'Keine Daten gefunden');

WHEN OTHERS THEN
	RAISE_APPLICATION_ERROR(-20051,'f_nextID_n() ERROR');

END;
/



/*********************************************************************
/**
/**Function: f_checkBoolean_n
/** In: l_n_value_in Wert, der geprüft werden muss
/** Returns: Yes / No (0,1)
/**Developer: Bauer, Dorr
/**Description: Prüft, ob ein mitgegebener Wert binär ist.
/**
/**********************************************************************/
CREATE OR REPLACE
FUNCTION f_checkBoolean_n (l_n_value_in IN number)
RETURN number
AS

-- Konstanten
n_TRUE number := 1;
n_FALSE number := 0;

BEGIN
	
	if LENGTH(l_n_value_in) = 1 
		AND (l_n_value_in != n_TRUE
		OR l_n_value_in != n_FALSE) THEN
			return n_TRUE;
	ELSE
			return n_FALSE;
	END IF;

END;
/

/*********************************************************************
/**
/**Function: f_Check_Existing_Rec
/** In: 
/** Returns: Yes / No (0,1)
/**Developer: Bauer, Dorr
/**Description: Prüft, ob es bereits einen Eintrag zu einem Value X in der Tabelle Y bei einer Spalte Z gibt.
/**
/**********************************************************************/
CREATE or REPLACE
FUNCTION f_Check_Existing_Rec (l_v_tableName in varchar, l_v_columnName in varchar, l_v_columnValue in varchar)
RETURN NUMBER
IS
	
	-- Constants
	n_TRUE number := 1;
	n_FALSE number := 0;
	
	-- Locals
	l_n_RecCounter number;
	v_sql varchar2(200) := 'select COUNT(' || l_v_columnName || ') FROM ' || l_v_tableName ||
	' WHERE ' || l_v_columnName || '='|| '''' || UPPER(l_v_columnValue) || '''';

BEGIN
	
	
	EXECUTE IMMEDIATE v_sql INTO l_n_RecCounter;

	if l_n_RecCounter > 0 THEN
		return n_TRUE;
	else
		return n_FALSE;
	END IF;
	 	
END;
/


/*********************************************************************
/**
/**Function: f_Insert_ErwArt
/** In: 
/** Returns: the ID of the record
/**Developer: Bauer, Dorr
/**Description: Prüft, ob eine ErwArt bereits in der DB ist, wenn nicht
/** wird diese angelegt. In beiden Fällen wird eine Neue oder eine bereits 
/** existierende ID geliefert.
/**
/**********************************************************************/
CREATE or REPLACE
FUNCTION f_Insert_ErwArt (l_v_ErwArt in varchar)
RETURN NUMBER
IS

	-- Constants
	n_TRUE number := 1;
	
	-- Locals
	l_n_nextID number;
	l_n_currentID number;

BEGIN

	-- Prüfung, ob die Zuordnung bereits existiert
	if f_Check_Existing_Rec('ErwArt', 'ErwArt' , UPPER(l_v_ErwArt)) = n_TRUE THEN
		
		SELECT ID INTO l_n_currentID FROM ErwArt WHERE ErwArt = UPPER(l_v_ErwArt);
		RETURN l_n_currentID;
	
	ELSE
	
		l_n_nextID := f_nextID_n('ErwArt');
				Insert into ErwArt(Id,ErwArt) values (l_n_nextID, UPPER(l_v_ErwArt));
		COMMIT;
		RETURN l_n_nextID;
	
	END IF;

END;
/

/*********************************************************************
/**
/**Function: f_Insert_Zuordnung
/** In: 
/** Returns: the ID of the record 
/**Developer: Bauer, Dorr
/**Description: Prüft, ob eine Zuordnung bereits in der DB ist, wenn nicht
/** wird diese angelegt. In beiden Fällen wird eine Neue oder eine bereits 
/** existierende ID geliefert.
/**
/**********************************************************************/
CREATE or REPLACE
FUNCTION f_Insert_Zuordnung (l_v_Zuordnung in varchar)
RETURN NUMBER
IS
	
	-- Constants
	n_TRUE number := 1;
	
	-- Locals
	l_n_nextID number;
	l_n_currentID number;
	
BEGIN
	
	-- Prüfung, ob die Zuordnung bereits existiert
	if f_Check_Existing_Rec('Zuordnung', 'Zuordnung', UPPER(l_v_Zuordnung) ) = n_TRUE THEN
		
		SELECT ID INTO l_n_currentID from Zuordnung WHERE Zuordnung = UPPER(l_v_Zuordnung);
		RETURN l_n_currentID;

	ELSE
	
		l_n_nextID := f_nextID_n('Zuordnung');
		Insert into Zuordnung(Id, Zuordnung) values (l_n_nextID,UPPER(l_v_Zuordnung));
		COMMIT;
		RETURN l_n_nextID;
	
	END IF; 
	
END;
/




/*********************************************************************
/**
/**Function: f_Insert_Widmung
/** In: 
/** Returns: the ID of the record 
/**Developer: Bauer, Dorr
/**Description: Prüft, ob eine Zuordnung bereits in der DB ist, wenn nicht
/** wird diese angelegt. In beiden Fällen wird eine Neue oder eine bereits 
/** existierende ID geliefert.
/**
/**********************************************************************/
CREATE or REPLACE
FUNCTION f_Insert_Widmung (l_v_WidmungKurz in varchar)
RETURN NUMBER
IS
	-- Constants
	n_TRUE number := 1;

	-- Locals
	l_n_nextID number;
	l_n_currentID number;
	l_v_WidmungLang varchar(250);

	CURSOR GET_Widmung IS SELECT * FROM WidmungsDomain;
	vResult GET_Widmung%ROWTYPE;

BEGIN

	if f_Check_Existing_Rec('Widmung','WidmungKurz', UPPER(l_v_WidmungKurz) ) = n_TRUE THEN

		SELECT ID INTO l_n_currentID from Widmung WHERE WidmungKurz = UPPER(l_v_WidmungKurz);
		RETURN l_n_currentID;

	ELSE

		-- CURSOR
		FOR vResult IN Get_Widmung
		LOOP
	
			IF INSTR(UPPER(l_v_WidmungKurz), vResult.WidmungKurz) != 0 THEN
				l_v_WidmungLang := l_v_WidmungLang || ' ; ' || vResult.WidmungLang;
			END IF;
		
		END LOOP;

		l_n_nextID := f_nextID_n('Widmung');
		Insert into Widmung(Id, WidmungKurz, WidmungLang)
		values (l_n_nextID,UPPER(l_v_WidmungKurz), l_v_WidmungLang);
	
		RETURN l_n_nextID;
	
	END IF;

END;
/



/*********************************************************************
/**
/**Function: f_Insert_Adresse
/** In: 
/** Returns: the ID of the record 
/**Developer: Bauer, Dorr
/**Description: Prüft, ob eine Adresse bereits in der DB ist, wenn nicht
/** wird diese angelegt. In beiden Fällen wird eine Neue oder eine bereits 
/** existierende ID geliefert.
/**
/**********************************************************************/
CREATE or REPLACE
FUNCTION f_Insert_Adresse (l_n_KG_Code in Number, l_v_Strasse in varchar, l_v_Orientierungsnummer in varchar)
RETURN NUMBER
IS

	-- Constants
	n_TRUE number := 1;
	
	-- locals
	l_n_nextID number;
	l_n_currentID number;
	l_n_rec number;

BEGIN

	SELECT COUNT(ID) INTO l_n_rec FROM Adresse
		WHERE KG_Code = l_n_KG_Code
			AND Strasse = UPPER(l_v_Strasse)
			AND Orientierungsnummer = UPPER(l_v_Orientierungsnummer);

	IF l_n_rec = 0 THEN
			
		l_n_nextID := f_nextID_n('Adresse');
		Insert into Adresse(Id, KG_Code, Strasse, Orientierungsnummer)
		values (l_n_nextID, l_n_KG_Code, UPPER(l_v_Strasse), UPPER(l_v_Orientierungsnummer));
		RETURN l_n_nextID;

	ELSE
	
		select ID INTO l_n_currentID FROM Adresse
		WHERE KG_Code = l_n_KG_Code
			AND Strasse = UPPER(l_v_Strasse)
			AND Orientierungsnummer = UPPER(l_v_Orientierungsnummer);
			
		RETURN l_n_currentID;
		
	END IF;
	
END;
/


/*********************************************************************
/**
/**Function: f_Insert_KG
/** In: 
/** Returns: the ID of the record 
/**Developer: Bauer, Dorr
/**Description: Prüft, ob eine KG bereits in der DB ist, wenn nicht
/** wird diese angelegt. In beiden Fällen wird eine Neue oder eine bereits 
/** existierende ID geliefert.
/**
/**********************************************************************/
CREATE or REPLACE
FUNCTION f_Insert_KG (l_n_KG_Code in Number, l_v_Katastralgemeinde in varchar,l_n_PLZ_Code in number)
RETURN NUMBER
IS
	l_n_exists number;
	n_TRUE number := 1;
	n_FALSE number := 0;
BEGIN

	l_n_exists := f_Check_Existing_Rec('KG', 'KG_Code', l_n_KG_Code);

	IF l_n_exists = 0 then
		l_n_exists := f_Check_Existing_Rec('PLZ', 'PLZ_Code', l_n_PLZ_Code);

		IF l_n_exists != 0 THEN
			Insert into KG(KG_Code, Katastralgemeinde, PLZ_Code)
				values (l_n_KG_Code, UPPER(l_v_Katastralgemeinde), l_n_PLZ_Code);
			RETURN n_TRUE;
		ELSE
			RETURN n_FALSE;
		END IF;
		
	ELSE
	
		RETURN n_TRUE;
		
	END IF;

END;
/